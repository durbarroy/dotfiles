* Minor settings
** Display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+END_SRC

** Show line and column number
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

* Org
** emacs-lisp org-header footer
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Inhibit startup splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

* Changing default terminal and adding keybindings
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<s-return>") 'ansi-term)

#+END_SRC

* Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Global highlight line mode
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC

* Global prettify symbols
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

* Auto-save and backup
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Scroll, tool and menu bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

* Ido
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Buffers
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC

** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

#+END_SRC

** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC

* Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC

* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
  
#+END_SRC

* Window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Convenient functions
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
	  (kill-new
	   (buffer-substring
	    (point-at-bol)
	    (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

* Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC

* sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title ":) :) :) WOW EMACS !!!"))
#+END_SRC

* Autocomplete
** company setup
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

* dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC

* Symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

* EXWM
** exwm setup
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC

** exwm systray
#+BEGIN_SRC emacs-lisp
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
#+END_SRC

** exwm workspace manager
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-k") 'exwm-workspace-delete)
  (global-set-key (kbd "s-w") 'exwm-workspace-swap)
#+END_SRC

* Geiser
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t)
  (setq geiser-active-implementations '(guile))
#+END_SRC

* Slime
** install
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t)
#+END_SRC

** slime config
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC

* python-interaction
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "/home/durbar/anaconda3/bin/ipython"
	python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

* org-babel-python
#+BEGIN_SRC emacs-lisp
  (setq org-babel-python-command "/home/durbar/anaconda3/bin/python")
#+END_SRC

* org-python
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC

* paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
#+END_SRC

* julia-repl
#+BEGIN_SRC emacs-lisp
  (use-package julia-repl
    :ensure t)
  (require 'julia-repl)
#+END_SRC

* auctex
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t))

  (require 'yasnippet)
  (yas-global-mode 1)
  (yas-reload-all)
#+END_SRC

* pop-up kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind("M-y" . popup-kill-ring))
#+END_SRC

* mark-multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

* expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind("C-q" . 'er/expand-region))
#+END_SRC

* org-indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

* fly check
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

* New theme(zerodark theme)
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t)
#+END_SRC

* Battery indicator
#+BEGIN_SRC emacs-lisp
  ;(use-package fancy-battery
    ;:ensure t
    ;:config
    ;(setq fancy-battery-show-percentage t)
    ;(setq battery-update-interval 15)
    ;;(if window-system
        ;;(fancy-battery-mode)
      ;;(display-battery-mode)))

  (display-battery-mode)
#+END_SRC

* ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC

* Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

#+END_SRC

* Launching programs
#+BEGIN_SRC emacs-lisp
  (defun exwm-async-run (name)
    (interactive)
    (start-process name nil name))

  (defun durbar/launch-browser ()
    (interactive)
    (exwm-async-run "firefox"))

  (defun durbar/graphical-file-manager ()
    (interactive)
    (exwm-async-run "thunar"))

  (defun durbar/lock-screen ()
    (interactive)
    (exwm-async-run "slock"))

  (defun durbar/shutdown ()
    (interactive)
    (start-process "halt" nil "sudo" "halt"))

  (defun durbar/terminal ()
    (interactive)
    (exwm-async-run "urxvt"))

  (global-set-key (kbd "s-u") 'durbar/terminal)
  (global-set-key (kbd "s-f") 'durbar/launch-browser)
  (global-set-key (kbd "s-t") 'durbar/graphical-file-manager)
  (global-set-key (kbd "<XF86ScreenSaver>") 'durbar/lock-screen)
  (global-set-key (kbd "<XF86PowerOff>") 'durbar/shutdown)
#+END_SRC

* Default browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
#+END_SRC

* Projectile
** install
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))
#+END_SRC

** projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC

* Line numbers and programming
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

* Specific languages
** C/C++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** bash
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
  (add-hook 'shell-mode-hook 'flycheck-mode)
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC

* Modeline
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'linum-relative-mode)
    (diminish 'visual-line-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'yas-minor-mode)
    (diminish 'flycheck-mode)
    (diminish 'projectile-mode)
    (diminish 'company-mode))
#+END_SRC

** No separator
#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator nil)
#+END_SRC

* Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

* transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 .80))
  (add-to-list 'default-frame-alist '(alpha . (85 . 80)))
#+END_SRC

