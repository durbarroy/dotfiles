let mapleader =" "

call plug#begin('~/.vim/plugged')
"Plug 'junegunn/goyo.vim'
"Plug 'julialang/julia-vim'
#Plug 'vimwiki/vimwiki'
#Plug 'tbabej/taskwiki'
#Plug 'plasticboy/vim-markdown'
"Plug 'xuhdev/vim-latex-live-preview'
"Plug 'conornewton/vim-latex-preview'
"Plug 'scrooloose/nerdtree' 
"Plug 'itchyny/lightline.vim'
"Plug 'jpalardy/vim-slime', { 'for': 'python' }
"Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
"Plug 'skanehira/preview-markdown.vim'
"Plug 'conornewton/vim-pandoc-markdown-preview'
call plug#end()

" let g:livepreview_previewer = 'zathura'
let g:latex_pdf_viewer = 'zathura'
let g:md_pdf_viewer = 'zathura'
" Some basics:
	set nocompatible
	filetype plugin on
	syntax on
	set encoding=utf-8
"	set number relativenumber
	set number
	set lazyredraw
	set ttyfast
	set regexpengine=1

" Enable autocompletion:
	set wildmode=longest,list,full
" Disable automatic commenting on newline
	autocmd filetype * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Goyo plugin makes text more readable when writing prose:
	map <leader>f :Goyo \| set linebreak<CR>

" Spell-check set to <leader>o, 'o' for 'orthography':
	map <leader>o :setlocal spell! spelllang=en_US<CR>

" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
	set splitbelow splitright

" Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l

" Check file in shellcheck:
	map <leader>s :!clear && shellcheck %<CR>

" Copy selected text to system clipboard (requires gvim installed)
	vnoremap <C-c> "*Y :let @+=@*<CR>
	map <C-p> "+P


" vimwiki setup
"let g:vimwiki_list = [{'path':'/home/durbar/Sync/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]
"let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" Makes vimwiki links as [text](text.md) instead of [text](text)
"let g:vimwiki_markdown_link_ext = 1

"let g:taskwiki_markup_syntax = 'markdown'
"let g:markdown_folding = 1



"------------------------------------------------------------------------------
" slime configuration 
"------------------------------------------------------------------------------
" always use tmux
let g:slime_target = 'tmux'

" fix paste issues in ipython
let g:slime_python_ipython = 1

" always send text to the top-right pane in the current tmux tab without asking
let g:slime_default_config = {
            \ 'socket_name': get(split($TMUX, ','), 0),
            \ 'target_pane': '{top-right}' }
let g:slime_dont_ask_default = 1

"------------------------------------------------------------------------------
" ipython-cell configuration
"------------------------------------------------------------------------------
" Keyboard mappings. <Leader> is \ (backslash) by default

" map <Leader>s to start IPython
nnoremap <Leader>s :SlimeSend1 ipython --matplotlib<CR>

" map <Leader>r to run script
nnoremap <Leader>r :IPythonCellRun<CR>

" map <Leader>R to run script and time the execution
nnoremap <Leader>R :IPythonCellRunTime<CR>

" map <Leader>c to execute the current cell
nnoremap <Leader>c :IPythonCellExecuteCell<CR>

" map <Leader>C to execute the current cell and jump to the next cell
nnoremap <Leader>C :IPythonCellExecuteCellJump<CR>

" map <Leader>l to clear IPython screen
nnoremap <Leader>l :IPythonCellClear<CR>

" map <Leader>x to close all Matplotlib figure windows
nnoremap <Leader>x :IPythonCellClose<CR>

" map [c and ]c to jump to the previous and next cell header
nnoremap [c :IPythonCellPrevCell<CR>
nnoremap ]c :IPythonCellNextCell<CR>

" map <Leader>h to send the current line or current selection to IPython
nmap <Leader>h <Plug>SlimeLineSend
xmap <Leader>h <Plug>SlimeRegionSend

" map <Leader>p to run the previous command
nnoremap <Leader>p :IPythonCellPrevCommand<CR>

" map <Leader>Q to restart ipython
nnoremap <Leader>Q :IPythonCellRestart<CR>

" map <Leader>d to start debug mode
nnoremap <Leader>d :SlimeSend1 %debug<CR>

" map <Leader>q to exit debug mode or IPython
nnoremap <Leader>q :SlimeSend1 exit<CR>

" map <F9> and <F10> to insert a cell header tag above/below and enter insert mode
nmap <F9> :IPythonCellInsertAbove<CR>a
nmap <F10> :IPythonCellInsertBelow<CR>a

" also make <F9> and <F10> work in insert mode
imap <F9> <C-o>:IPythonCellInsertAbove<CR>
imap <F10> <C-o>:IPythonCellInsertBelow<CR>


 set laststatus=2


 " Note taking configuration in vim

 nnoremap <leader>ni :e $NOTES_DIR/index.md<CR>:cd $NOTES_DIR<CR>


 " Make Ctrlp use ripgrep
 if executable('rg')
	 let g:Ctrlp_user_command = 'rg %s --files --color=never --glob ""'
	 let g:ctrlp_user_caching = 0
 endif
